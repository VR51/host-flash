#!/bin/bash
clear
# set -x
###
#
# Host Flash™ 3.0.7 beta
#
# Downloads hosts file rules from various sources.
# Installs hosts file rules into /etc/hosts
# Integrates Host Flash™ hosts file rules with rules that already exist in /etc/hosts
#
# For OS: Linux (Debian)
# Tested With: Ubuntu flavours
#
# Lead Author: Lee Hodson
# Donate: https://paypal.me/vr51
# Website: https://host-flash.com<https://host-flash.com>
# This Release: 31st Oct. 2018
# First Written: 18th Oct. 2015
# First Release: 2nd Nov. 2015
#
# Copyright Host Flash™ https://host-flash.com<https://host-flash.com>
# License: GPL3
#
# Programmer: Lee Hodson<journalxtra.com>, VR51<vr51.com>
#
# Use of this program is at your own risk
#
# INSTALLS OR UPDATES
#
# Use Host Flash™ to block access to websites (hosts), ad servers, malicious websites and time wasting websites.
# Use Host Flash™ to manage your hosts file
#
# TO RUN:
#
# Ensure the script is executable:
#
#  Right-click > properties > Executable
#
#  OR
#
#  chmod u+x hostflash
#
# Launch by clicking the script file or by typing `bash hostflash` at the command line.
#
# Host Flash™ will attempt to preserve existing host rules.
#
#
###

##
#
# TO DO / DEV NOTES
#
##
# versions: add deb installer
#  installed has desktop icon (like ServUp)
#
#  En/disable Automatic list update
#  En/disable Automatic script update
#
# CLI: disable HF, enable HF, add rule, remove rule, update lists, set options
#
# Move even more actions into functions.
# Tidy up
# Add input checking
# Add error checking/logging
# Refine/add messages
# Improve DNS cache cleaner
#  Check app exists before use
#  Message: Suggest browser DNS cache clean options
#
# Detect hosts file location
#  Menu: configure file location
#
# Improve menu system
#  What do you want to do? Manage Lists, Update hosts, Manage Custom Files, See Info
#   Do it
#
# Summary info on main screen / maybe footer for all screens
#  Add extra useful info
#  Include link to host-flash.com
#
# Info table
#  Details about the live hosts file
#   size
#   lines
#   timestamp
#  View all HF configs
#
#  Details about the built hosts file
#   size
#   lines
#   timestamp
#
#  Info about each list
#   Last update time
#
# Add last 7 updates log
#  ${log#[time]}
#  ${log#[size]}
#  ${log#[lines]}
#
# Compact local whitelists and local blacklists (all lower, sort -u)
# View/Edit local lists (nano, pico, cat)
#
#
# Integrate with SaLi (?)
#
###

##
#
# CONFIGS - should be no reason to manually change these
#
# Any of these can be overruled by adding each variable along with its new value into $HOME/.config/hostflash/.hfrc
#
##

# Do not Use trailing slashes in URLs, URIs or directory paths

package='Host Flash™' # Name of software installed by this installer
version='3.0.7 beta - 1st Nov 2018'

# Declare arrays and types

declare -A app conf dir file message
# Additional associative arrays for lists declared in while loop below. See 'DECLARE LIST ARRAYS'

declare -a menu # Menu options are set within __menu_main()
declare -a select # Menu options count
declare -a mode # Used for notices
declare -a essentialpackages # Packages to install to help the build process
declare -a credits # Hosts file credits
declare -a flush # DNS cache flush commands
declare -i listc listcc listsc # For list repository counts

# Directories

dir[gith]='https://github.com/VR51/host-flash' # Github home URL for this package.
dir[gitp]='https://github.com/VR51/host-flash.git' # Software source package git address
dir[src]="$HOME/src/hostflash" # Directory where the source code will be stored locally
dir[tmp]="${dir[src]}/tmp" # Directory where temporary files will be stored locally
dir[docs]="${dir[src]}/DOC" # Location of program documents. # To be written
dir[conf]="$HOME/.config/hostflash" # Location of custom configuration files.

# Files

file[hosts]='/etc/hosts' # Location of system hosts file. Where it is copied from and where it is installed to.
# file[hosts]='/home/lee/Goodies/Downloaders/test/hosts' # For testing by me

file[conf]="${dir[conf]}/.hfrc" # Location of user's custom settings for Host Flash™.
file[confwl]="${dir[conf]}/.hfwlrc" # Location of the user's custom whitelist.
file[confwlw]="${dir[conf]}/.hfwlwrc" # Location of the user's custom whitelist-wild.
file[confbl]="${dir[conf]}/.hfblrc" # Location of the user's custom blacklist.
file[confcl]="${dir[conf]}/.hfclrc" # Location of the user's custom hosts lists.

# App Launcher Settings
# These are specific to the application/task manager installer (yet to be implemented)

app[icon]="${dir[src]}/data" # Directory where the application icon will be located.
app[bin]='/usr/bin' # Binary installation path. Where should the compiled binary be installed to? Exact path. # Not required for this installer.
app[icon]="hostflash.svg" # Icon name
app[type]='Application' # 
app[cats]='Utilities' # Application launcher categories
app[binary]="hostflash" # Name of the binary file that is this program.

# Detected settings

user=$(whoami) # Current User
group=$(id -g -n $user) # Current user's primary group


###
#
# DECLARE LIST ARRAYS
# 
###

# Declare custom list associative arrays. If they are not declared we cannot use them.

# Count Lists
listc=$(grep -E 't[[:digit:]]+\[status]=' "$0" | wc -l) # Count lists in hostflash script
if test $(grep -En 't[[:digit:]]+\[status]=' "${file[confcl]}")
then
	listcc=$(grep -E 't[[:digit:]]+\[status]=' "${file[confcl]}" | wc -l) # Count custom lists in .hfclrc
else
	listcc=0
fi
let listsc=listc+listcc

# Declare the list arrays
n=1 # list[0] is reserved for future special purpose. Maybe will hold list count?
while [ $n -le $listsc ] ; do
	declare -A list${n}
	let n=n+1
done


##
#
# LISTS
#
#
# These are...
#
# list[status]='Enabled / Disabled' # * or 0 for TRUE or FALSE
# list[info]='List Domain' # The name of the list
# list[src]='Download URL' # Where the package is downloaded from
# list[file]='Download Package' # Name of package downloaded
# list[target]='Package Target' # Name of usable file in the downloaded package
# list[flag]='Flags: E.g Package Type' # unzip, p7zip, empty if raw txt, or whitelist.
#
# Changes to list[status] are stored in .hfrc
# Custom lists will be added to .hfclrc
#		Framework in place: conf etc... Needs menu section to be added.
#
##

#https://hosts-file.net/?s=Download
list1[status]='+'
list1[info]='hosts-file.net (Liberal: Blocks mostly adware, spyware, malware and trackers. Big list)'
list1[src]='http://hosts-file.net/download'
list1[file]='hosts.txt'
list1[target]='hosts.txt'
list1[flag]=''

list2[status]='+'
list2[info]='hosts-file.net update (Liberal: Blocks mostly adware, spyware, malware and trackers. Big list)'
list2[src]='http://hosts-file.net'
list2[file]='hphosts-partial.txt'
list2[target]='hphosts-partial.txt'
list2[flag]=''

list3[status]='+'
list3[info]='mvps.org (Liberal: Blocks mostly adware, spyware, malware and trackers. Big list)'
list3[src]='http://winhelp2002.mvps.org'
list3[file]='hosts.zip'
list3[target]='HOSTS'
list3[flag]='unzip'

list4[status]='+'
list4[info]='free.fr-Trackers (Moderate: Blocks trackers)'
list4[src]='http://rlwpx.free.fr/WPFF'
list4[file]='htrc.7z'
list4[target]='Hosts.trc'
list4[flag]='p7zip'

list5[status]='+'
list5[info]='free.fr-Ad-Servers (Moderate: Blocks ad servers)'
list5[src]='http://rlwpx.free.fr/WPFF'
list5[file]='hpub.7z'
list5[target]='Hosts.pub'
list5[flag]='p7zip'

list6[status]='+'
list6[info]='free.fr-Malware (Moderate: Blocks malware domains)'
list6[src]='http://rlwpx.free.fr/WPFF'
list6[file]='hrsk.7z'
list6[target]='Hosts.rsk'
list6[flag]='p7zip'

list7[status]='+'
list7[info]='free.fr-Adult (Moderate: Blocks adult domains. Coincidentally blocks forums and some social sites)'
list7[src]='http://rlwpx.free.fr/WPFF'
list7[file]='hsex.7z'
list7[target]='Hosts.sex'
list7[flag]='p7zip'

list8[status]='+'
list8[info]='free.fr-Misc (Moderate: Blocks miscellaneous domains)'
list8[src]='http://rlwpx.free.fr/WPFF'
list8[file]='hmis.7z'
list8[target]='Hosts.mis'
list8[flag]='p7zip'

list9[status]='+'
list9[info]='someonewhocares.org (Liberal: Blocks mostly adware, spyware, malware and trackers. Small list)'
list9[src]='http://someonewhocares.org/hosts'
list9[file]='hosts'
list9[target]='hosts'
list9[flag]=''

list10[status]='+'
list10[info]='malwaredomainlist.com (Liberal: Blocks mostly malware. Small list)'
list10[src]='http://www.malwaredomainlist.com/hostslist'
list10[file]='hosts.txt'
list10[target]='hosts.txt'
list10[flag]='raw'

list11[status]='+'
list11[info]='KADhosts (Liberal: Blocks malware hosts)'
list11[src]='https://raw.githubusercontent.com/azet12/KADhosts/master/KADhosts.txt'
list11[file]='hosts.txt'
list11[target]='hosts.txt'
list11[flag]='raw'

list12[status]='+'
list12[info]='yoyo.org (Liberal: Blocks adservers)'
list12[src]='https://pgl.yoyo.org/as/serverlist.php?showintro=0;hostformat=hosts'
list12[file]='hosts.txt'
list12[target]='hosts.txt'
list12[flag]='raw'

list13[status]='+'
list13[info]='Mitchell Krog (Liberal: Blocks spam bot hosts)'
list13[src]='https://raw.githubusercontent.com/mitchellkrogza/Badd-Boyz-Hosts/master/hosts'
list13[file]='hosts.txt'
list13[target]='hosts.txt'
list13[flag]='raw'

list14[status]='+'
list14[info]='CoinBlockerLists (Liberal: Blocks cryptominers)'
list14[src]='https://zerodot1.gitlab.io/CoinBlockerLists/hosts_browser'
list14[file]='hosts.txt'
list14[target]='hosts.txt'
list14[flag]='raw'

list15[status]='+'
list15[info]='Lightswitch05 (Liberal: Blocks ads and trackers)'
list15[src]='https://raw.githubusercontent.com/lightswitch05/hosts/master'
list15[file]='ads-and-tracking-extended.txt'
list15[target]='ads-and-tracking-extended.txt'
list15[flag]=''

list16[status]='+'
list16[info]='AdAway (Liberal: Blocks ad networks)'
list16[src]='https://adaway.org/hosts.txt'
list16[file]='hosts.txt'
list16[target]='hosts.txt'
list16[flag]=''

list17[status]='+'
list17[info]='hostsfile.org (Very Strict: Regular blocks + porn, gambling and gaming sites)\n'
list17[src]='http://www.hostsfile.org/Downloads'
list17[file]='hosts.txt'
list17[target]='hosts.txt'
list17[flag]=''

# Others

list18[status]='+'
list18[info]='Community Whitelist (Host Flash™ whitelist. Unblocks a limited set of sites blocked by the other blacklists)'
list18[src]='https://gist.githubusercontent.com/VR51/7eaace2b6778ea508996/raw'
list18[file]='whitelist.txt'
list18[target]='whitelist.txt'
list18[flag]='whitelist'

list19[status]='+'
list19[info]='Community Whitelist Wild (Host Flash™ wild whitelist. Unblocks a limited set of sites blocked by the other blacklists)'
list19[src]='https://gist.githubusercontent.com/VR51/9798c78337fe2f7ad589/raw/'
list19[file]='whitelist-wild.txt'
list19[target]='whitelist-wild.txt'
list19[flag]='whitelist-wild'

list20[status]='+'
list20[info]='Community Blacklist (Host Flash™ blacklist. Blocks a limited set of sites not blocked by other lists)'
list20[src]='https://gist.githubusercontent.com/VR51/ef3b90b1be2693a44f27/raw/'
list20[file]='blocklist.txt'
list20[target]='blocklist.txt'
list20[flag]=''

list21[status]='+'
list21[info]='Local Whitelist (Your own custom whitelist)'
list21[src]='localhost'
list21[file]='.hfwlrc'
list21[target]='.hfwlrc'
list21[flag]='whitelist'

list22[status]='+'
list22[info]='Local Whitelist Wild (Your own custom wild whitelist)'
list22[src]='localhost'
list22[file]='.hfwlwrc'
list22[target]='.hfwlwrc'
list22[flag]='whitelist-wild'

list23[status]='+'
list23[info]='Local blacklist (Your own custom blacklist)'
list23[src]='localhost'
list23[file]='.hfblrc'
list23[target]='.hfblrc'
list23[flag]=''



# GENERAL

essentialpackages=( zip unzip 7z curl sed git )
	
conf[ess]=0 # Essentials # Install build essential software. 0 = Not done, 1 = Done
conf[upv]=0 # Update Host Flash™ program.
#conf[locv]=$($binary -v) # Installed package version
conf[inst]=$( ls -l "$0" | cut -d' ' -f 6-8) # $package installation date
conf[locv]="$version installed ${conf[inst]}"
conf[gitv]=$(curl -v --silent "${dir[gith]}/commit/master" --stderr - | grep '<relative-time datetime' | sed -E 's#<relative-time datetime="(.+)">.+$#\1#g' | tr -d '[:space:]' | tr '[:alpha:]' ' ')
conf[hosts]=$( ls -l "${file[hosts]}" | cut -d' ' -f5 ) # Hosts file size
conf[hostt]=$( ls -l "${file[hosts]}" | cut -d' ' -f 6-9 ) # Hosts file timestamp
conf[hostc]=$( wc -l "${file[hosts]}" | cut -d' ' -f1 ) # Hosts file line count

conf[ip]='0.0.0.0' # Redirect IP address
conf[mode]='0' # Build Only or Build and Install 0 or 1

## END SETTINGS

## BEGIN 

# Other settings
bold=$(tput bold)
normal=$(tput sgr0)

# Locate where we are
filepath="$( echo $PWD )"

# A Little precaution
cd "$filepath"


# Make directories

if test ! -d "$HOME/src"; then
	mkdir "$HOME/src"
fi

if test ! -d "${dir[src]}"; then
	mkdir "${dir[src]}"
fi

if test ! -d "${dir[tmp]}"; then
	mkdir "${dir[tmp]}"
else
	rm -r "${dir[tmp]}"
	mkdir "${dir[tmp]}"
fi

if test ! -d "${dir[conf]}"; then
	mkdir "${dir[conf]}"
fi


# Make User Config files

f=( "$HOME/src" "${file[conf]}" "${file[confwl]}" "${file[confwlw]}" "${file[confbl]}" "${file[confcl]}" )
for i in ${f[@]}; do
	if test ! -f "$i"; then
		touch "$i"
	fi
done
unset f

# INSTALL RC SETTINGS

function __repaint() {
# Loads configs then clears the screen
# Whatever calls this should reload the screen for the new configs to be reflected on the screen

	# @1 = type: soft, hard, conf, ret
	#  soft just refreshes the screen
	#  hard reloads the script in the current shell
	#  conf must be followed by a config file to load. Loads default conf then extra conf.
	#  'no argument' loads the default config file represented by ${file[conf]}
	# @2..@n = config file(s) to reload
	#
	# ret executes the function stated in $2
	#
	# We use $in instead of $@
	
	clear
	
	in=( $@ )
	
	case "${in[0]}" in
	
		soft) # Reset variables
			tset
	
		;;
		
		hard) # Restart this script
			exec bash "$0"
		
		;;

		conf) # Include basic conf and any extras listed in $@

		if source "${in[1]}"
		then
				for i in "${in[@]:1}"; do
					source "$i"
				done
				source "${file[conf]}"
		else
				for i in "${in[@]:1}"; do
					. "$i"
				done
				. "${file[conf]}"
		fi
		
		;;
		
		ret)
			$2
		
		;;

		*) # Include basic conf only

		if source "${file[conf]}"
		then
				source "${file[conf]}"
		else
				. "${file[conf]}"
		fi
		
		;;
	
	esac

}


# Include custom lists

__repaint conf "${file[confcl]}"



##
# Actions
##


function __run() {
	# Check for terminal then run else just run program
	
	tty -s
	if test "$?" -ne 0 ; then
		__launch
	else
		__menu_main "$1" # This will be changed when CLI added
	fi

}

function __hosts_update() {
	# Read the file of hosts and remove any line listed in the input whitelist file

	# @1 = type: (file) norm or wild, or (string) rem or remw
	# @2 = file to remove data from
	# @3 = file containing lines of data to remove from @2 or single line of text to remove from @2

	case $1 in
		norm)

			data=$(<$3)
			data=$(echo $data | tr "[:blank:]" '|')
			grep -viE "^${conf[ip]}[[:blank:]]($data)" "$2" > "$2.tmp" # This method removes whitelisted hostnames

		;;

		wild)

			data=$(<$3)
			data=$(echo $data | tr "[:blank:]" '|')
			grep -viE "^${conf[ip]}.*($data)" "$2" > "$2.tmp" # This method removes whitelisted hostnames

		;;

		linen)
			# sed -r -i "s/${conf[ip]}[[:blank:]]$3.*?$//g" "$2" # Remove exact match
			grep -viE "^${conf[ip]}[[:blank:]]$3" "$2" > "$2.tmp" # This method removes whitelisted hostnames

		;;

		linew)
			# sed -r -i "s/${conf[ip]}[[:blank:]].*\.$3.*?$//g" "$2" # Remove any line with a match
			grep -viE "^${conf[ip]}.*$3.*?" "$2" > "$2.tmp" # This method removes whitelisted hostnames

		;;

	esac

	# Clean up
	if test -f "$2"; then
		mv "$2.tmp" "$2"
	fi
	
}

function __conf_update() {
	# Add or remove a single host from the .hf*rc config files

	# @1 = type: add, rem or remw
	# @2 = data to add/remove
	# @3 = file to add/remove @1 to/from
	
	case $1 in
		add)
			if ! grep "$2" "$3"
			then
				echo "$2" >> "$3"
			fi
		;;

		rem)
			sed -r -i "s/$2.*?$//g" "$3" # Remove exact match
		;;

		remw)
			sed -r -i "s/.*?$2.*?$//g" "$3" # Remove any line with a match
		;;
	esac
	
}

function __conf_delete() {
	__repaint conf "${file[confcl]}"
	
	# Delete specified file
	# @1 = File to delete
	# @2 = File's friendly name

	f[1]=${1}
	f[2]=${2}

	printf "${bold}DELETE CONFIG FILES${normal}"
	printf "\n\nReset chosen configuration file\n\n"

	# Display menu
	unset menu
	menu[1]="Proceed: Reset ${f[2]} by deleting file ${f[1]}"
	menu[2]="Return: Do not reset ${f[2]}"

	m=1
	while [ $m -le ${#menu[@]} ] ; do
		printf "$m) ${menu[$m]}\n"
		print
		let m=m+1
	done
	
	printf "\nChoose an option then press Enter:\n"
	read a
	
	while true ; do
		case $a in
			1)
				if test -f "${f[1]}"; then
					rm "${f[1]}"
					printf "${f[2]} reset.\n"
					printf "\nPress any key to continue\n"
					touch "${f[1]}"
					read something
				else
					printf "${f[2]} custom settings not yet created. Nothing to do. Nothing done.\n"
					printf "\nPress any key to continue\n"
					read something
				fi
				__menu_reset_confs
			;;
			
			2)
				__menu_reset_confs
			;;
			
			*)
				__repaint
			;;
		esac
	done

}

function __status() {
	# Change status of list: On or Off.
	
	# @1 = host list to change status of
	
	in=$1
	if grep "list$in\[status]='-'" "${file[conf]}"
	then
		sed -i "/list$in\[status]=/d" "${file[conf]}"
		echo -e "list${in}[status]='+'" >> "${file[conf]}"
	else
		sed -i "/list$in\[status]=/d" "${file[conf]}"
		echo -e "list${in}[status]='-'" >> "${file[conf]}"
	fi
	
}


function __build() {
	# Build the hosts file: download lists, clean them, merge them, create new hosts file

	# Download lists. Merge them into new hosts file
	n=1
	until [ $n -eq 0 ]; do
	
		# unset status info src file target flag

		status=$( eval echo "\${list$n[status]}" )
		info=$( eval echo "\${list$n[info]}" )
		src=$( eval echo "\${list$n[src]}" )
		file=$( eval echo "\${list$n[file]}" )
		target=$( eval echo "\${list$n[target]}" )
		flag=$( eval echo "\${list$n[flag]}" )

		#echo $status >> "${dir[conf]}/log.txt"
		#echo $info >> "${dir[conf]}/log.txt"
		#echo $src >> "${dir[conf]}/log.txt"
		#echo $file >> "${dir[conf]}/log.txt"
		#echo $target >> "${dir[conf]}/log.txt"
		#echo $flag >> "${dir[conf]}/log.txt"

		if test "$status" = '+' # && test ${#list[status]} -ne 0
		then
		
			if test "$src" != 'localhost'
			then
				if ! test "$flag" = 'raw'
				then
					curl -e "$src" "$src/$file" -o "${dir[tmp]}/$file"
					#echo "curl -e $src $src/$file -o ${dir[tmp]}/$file" >> "${dir[conf]}/log.txt"
				else
					curl -e "$src" "$src" -o "${dir[tmp]}/$file"
					#echo "curl -e $src $src -o ${dir[tmp]}/$file" >> "${dir[conf]}/log.txt"
				fi
				
		echo >> "${dir[conf]}/log.txt"
		echo >> "${dir[conf]}/log.txt"
		
				if test "$flag" = 'unzip'; then unzip -o "${dir[tmp]}/$file" -d "${dir[tmp]}"; fi
				if test "$flag" = 'p7zip'; then 7z e -y "${dir[tmp]}/$file" -o"${dir[tmp]}" ; fi
				
				if test "$flag" = 'whitelist'
				then
					cat "${dir[tmp]}/$target" >> "${dir[tmp]}/whitelist-temp.txt"
				elif test "$flag" = 'whitelist-wild'
				then
					cat "${dir[tmp]}/$target" >> "${dir[tmp]}/whitelist-wild-temp.txt"
				else
					cat "${dir[tmp]}/$target" >> "${dir[tmp]}/hosts-temp.txt"
				fi

				if test -f "${dir[tmp]}/$file"
				then
					rm "${dir[tmp]}/$file"
				fi
				
				if test -f "${dir[tmp]}/$target"
				then
					rm "${dir[tmp]}/$target"
				fi

			else # It's local host
				if test "$flag" = 'whitelist'
				then
					cat "${dir[conf]}/$target" >> "${dir[tmp]}/whitelist-temp.txt"
				elif test "$flag" = 'whitelist-wild'
				then
					cat "${dir[conf]}/$target" >> "${dir[tmp]}/whitelist-wild-temp.txt"
				else
					cat "${dir[conf]}/$target" >> "${dir[tmp]}/hosts-temp.txt"
				fi
			fi

			credits+=("# Includes hosts blacklist from $info\n")

		fi
		
		if test ${#status} -eq 0
		then
			let n=n-n
		else
			let n=n+1
		fi

	done

	__repaint

	printf "This next part could take some time.\nLook in ${dir[tmp]} to view activity in realtime.\n\nProcessing...\n"

	#	Format raw list data in hosts-temp.txt

	iconv -c -t UTF-8//TRANSLIT "${dir[tmp]}/hosts-temp.txt" > "${dir[tmp]}/hosts-temp-copy.txt" # Convert non-UTF8 characters to UTF8. Fix characters in French lists.
	grep -v '^#' "${dir[tmp]}/hosts-temp-copy.txt" > "${dir[tmp]}/hosts-temp.txt" # Remove all lines that begin with a comment
	sed -r -i 's/[[:blank:]]+/ /g' "${dir[tmp]}/hosts-temp-copy.txt" # Convert spaces and tabs each to a single space
	grep -Ev "[[:blank:]](ip6-)?(localhost|loopback|localnet|mcastprefix|allnodes|allrouters)\s?\b" "${dir[tmp]}/hosts-temp-copy.txt" > "${dir[tmp]}/hosts-temp.txt" # Remove localhost lines - the computer's installed host file already has localhost defined the way it should be
	grep -E '^[012][\.01-9]{1,2}' "${dir[tmp]}/hosts-temp.txt" > "${dir[tmp]}/hosts-temp-copy.txt" # Remove any line that does not begin with 0,1 or 2
	sed -r -i "s/^[012][\.01-9]{1,2}+[[:blank:]]/${conf[ip]} /g" "${dir[tmp]}/hosts-temp-copy.txt" # Replace with a single space and the new IP address everything up to, and including, the first tab in each line

	# grep -Ev '^[[:space:]]$' # Remove empty lines # Should not be needed now

	# Sort the lists
	if test -f "${dir[tmp]}/hosts-temp-copy.txt"
	then
		sort -f -u "${dir[tmp]}/hosts-temp-copy.txt" > "${dir[tmp]}/hosts-temp.txt"
	fi

	if test -f "${dir[tmp]}/whitelist-temp.txt"
	then
		sort -f -u "${dir[tmp]}/whitelist-temp.txt" > "${dir[tmp]}/whitelist.txt"
		rm "${dir[tmp]}/whitelist-temp.txt"
	fi

	if test -f "${dir[tmp]}/whitelist-wild-temp.txt"
	then
		sort -f -u "${dir[tmp]}/whitelist-wild-temp.txt" > "${dir[tmp]}/whitelist-wild.txt"
		rm "${dir[tmp]}/whitelist-wild-temp.txt"
	fi

	# Process whitelist -- remove whitelisted domains from hosts-temp.txt

	__hosts_update "norm" "${dir[tmp]}/hosts-temp.txt" "${dir[tmp]}/whitelist.txt"
	__hosts_update "wild" "${dir[tmp]}/hosts-temp.txt" "${dir[tmp]}/whitelist-wild.txt"

	#	Get head of the existing hosts file stored at /etc/hosts
	#	Remove old Host Flash™ blacklist from existing hosts file, assuming blacklist exists
	#	Remove empty lines from the end of the header
	#	This creates file hosts.head which is used a few lines down from here

	cp "${file[hosts]}" "${dir[tmp]}/hosts.copy"
	if grep -zPo '#### Host.? Flash.? Bad Hosts Block ########' "${dir[tmp]}/hosts.copy"
	then
		grep -zPo '(?s).*#### Host.? Flash.? Bad Hosts Block ########' "${dir[tmp]}/hosts.copy" | head -n -1 | grep -Ev '^[[:space:]]$' > "${dir[tmp]}/hosts.head" # Remove old HF data, remove HF header remove empty lines.
	fi

	printf '\n\n#### Host Flash™ Bad Hosts Block ########\n\n# Credits\n\n' >> "${dir[tmp]}/hosts.head" # Add HF heading

	for i in "${credits[@]}" ; do
		printf "$i" >> "${dir[tmp]}/hosts.head" # Add HF list provider credits
	done

	printf "\n\n# Installed with $package\n\n# Visit host-flash.com to learn more\n\n" >> "${dir[tmp]}/hosts.head" # Add HF credit

	cat "${dir[tmp]}/hosts.head" "${dir[tmp]}/hosts-temp.txt" > "${dir[tmp]}/hosts.txt" # Merge the old head with the new hosts blacklist

}

function __enable() {
	# Install Host Flash™ hosts list to /etc/hosts

	echo
	# Get su authority
	sudo -v

	# Backup original hosts file before first ever use of Host Flash™ in this system.
	# Only happens if it does not yet exist.
	if test ! -f "${file[hosts]}.hf.original"
	then
		sudo cp "${file[hosts]}" "${file[hosts]}.hf.original"
	fi

	if test -f "${dir[tmp]}/hosts.txt"
	then
		sudo cp "${file[hosts]}" "${file[hosts]}.hf.backup" # General restore file
		sudo mv "${dir[tmp]}/hosts.txt" "${file[hosts]}" # New hosts file
	else
		message[enable]="$package hosts file not found. Have you built it yet?"
	fi

	# Help the new hosts file take effect.
	__cleandns

}

function __disable() {
	# Remove Host Flash™ hosts list from /etc/hosts

	echo
	# Get su authority
	sudo -v
	
	cp "${file[hosts]}" "${dir[tmp]}/hosts.copy"
	if grep -zPo '#### Host.? Flash.? Bad Hosts Block ########' "${dir[tmp]}/hosts.copy"
	then
		# Remove old HF data, remove HF header remove empty lines.
		grep -zPo '(?s).*#### Host.? Flash.? Bad Hosts Block ########' "${dir[tmp]}/hosts.copy" | head -n -1 | grep -Ev '^[[:space:]]$' > "${dir[tmp]}/hosts.head"
		sudo mv "${dir[tmp]}/hosts.head" "${file[hosts]}"
	else
		message[disable]="$package not installed. Nothing to do."
	fi

	# Help the new hosts file take effect.
	__cleandns

}

function __cleandns() {
	# Clean the DNS local servers. We try them all.. just in case.

	flush=(
	'systemd-resolve --flush-caches' # General
	'service network-manager restart' # Debian
	'systemctl restart network.service' # Systemd
	'systemctl restart wicd.service' #  Systemd for WICD
	'systemctl restart NetworkManager.service' # Fedora, Manjaro, Arch using Network Manager
	'service nscd restart' # FreeBSD
	'/etc/init.d/network restart' # RHEL/Centos'
	'/etc/init.d/dns-clean restart' # Mint'
	'/etc/init.d/nscd restart' # other
	'/etc/init.d/networking force-reload' # Other
	'/etc/init.d/dnsmasq restart' # Other
	)
	
	sudo -v

	for i in "${flush[@]}"; do
		printf "${bold}Attempting to flush DNS cache ${normal} using command: $i\n"
		sudo $i
		printf "Do not worry if the above says 'fail'. We only need one success.\n\n"
	done

}

##
# MENUS
##


# Main Menu

function __menu_main() {

	__repaint conf "${file[confcl]}"

	# $1 = instruction

	while true; do

		if test "$?" -eq 0
		then

			case "${conf[mode]}" in

					0)
						mode[0]='MODE: Build Hosts Firewall Only\n'

					;;

					1)
						mode[0]='MODE: Build and Install Hosts Firewall\n'

					;;

			esac

			# Set Menu Options

			unset menu
			menu[1]='List Management (enable or disable repositories)'
			menu[2]='Custom List Management (add or remove rules)\n'

			menu[3]="[${conf[ip]}] - Change redirect IP address\n"

			menu[4]='Change Build/Install Mode\n'

			case "${conf[mode]}" in

				0)
					menu[5]='Build Host Flash™ list but do not install.\n'

				;;

				1)
					menu[5]='Build and Install Host Flash™ list.\n'

				;;

			esac

			menu[6]='Enable Host Flash™ list.'
			menu[7]='Disable Host Flash™ list.'
			case "${conf[mode]}" in

				0)
					menu[8]='Update hosts file with new custom rules but do not enable new hosts file\n'

				;;

				1)
					menu[8]='Update and Enable hosts file with new custom rules\n'

				;;

			esac
			menu[9]='Flush DNS rules\n'

			menu[10]='Restore original hosts file.\n'

			menu[11]="Reset $package configs and files (select in next menu)"

			case "${conf[ess]}" in

				0)
					menu[1000]='Install missing software packages needed by Host Flash™\n'

				;;

			esac

			printf $bold
			printf "${mode[0]}\n"
			printf $normal

			printf "MENU\n\n"
			printf "INSTRUCTIONS: a) Select lists to install with option 1, b) optionally add custom domains to blacklist or whitelist, c) build the hosts file firewall with option 5, before you d) Enable the newly built hosts file firewall with option 6. Change MODE to Build and Install to set $package to automatically install the hosts file after it is built.\n\n"

			n=1
			for i in "${menu[@]}"; do
				if [ "$i" == '' ]; then
					printf "\n"
				else
					printf "$n) $i\n"
					select[$n]=$n
					let n=n+1
				fi
			done

			printf "\nR) Restart $package\n"
			printf "\n0) Exit\n\n"

			# Notices

			printf $bold

			printf "\nGENERAL INFO\n"
				
			printf $normal

			printf "\n System $package: ${conf[locv]}"
			printf "\n Latest git commit: ${conf[gitv]}\n"
			printf "\n Hosts File Info: Line Count: ${conf[hostc]} | Bytes: ${conf[hosts]} | Timestamp: ${conf[hostt]} | Location: ${file[hosts]}\n"

			printf "\nIf the computer crashes during installation lower the number of lists processed or cool your computer then try again.\n"

			printf $bold
				printf "\nChoose Wisely: "
			printf $normal
			read REPLY
		
		else
			REPLY=$1
		fi

		case $REPLY in

		1) # Choose lists to download # When moved to its own menu this will only be [[:num:]]
			__menu_list_management

		;;
		
		2) # Manage custom whitelists and blacklists
			__menu_custom_list_management
			
		;;

		3) # Change redirect IP address

			printf "Current Redirect IP: ${conf[ip]}"
			printf "\nType in new Redirect IP then press Enter:\n\n"
			read ip

			if grep "conf\[ip]=" "${file[conf]}"
			then
				sed -i "s/conf\[ip]='.*'/conf\[ip]='$ip'/g" "${file[conf]}"
			else
				echo -e "conf""[ip]='$ip'" >> "${file[conf]}"
			fi

			__repaint

		;;

		4) # Set Mode

			if grep "conf\[mode]='0'" "${file[conf]}"
			then
				sed -i "s/conf\[mode]='0'/conf\[mode]='1'/g" "${file[conf]}"
				
			elif grep "conf\[mode]='1'" "${file[conf]}"
			then
				sed -i "s/conf\[mode]='1'/conf\[mode]='0'/g" "${file[conf]}"
				
			else
				echo -e "conf""[mode]='1'" >> "${file[conf]}"
			fi

			__repaint

		;;

		5) # Build or Build and Install the Host Flash™ hosts file

			__build
			
			case "${conf[mode]}" in
			
				1)
			
					__enable
					
					if test "${message[enable]}"
					then
						printf "\n${message[enable]}\nPress any key."
						read -a
					fi
					
				;;
				
			esac
			
			__repaint hard

		;;

		6) # Enable Host Flash™ hosts list

			__enable
			__repaint

		;;

		7) # Disable Host Flash™ hosts list

			__disable
			
			if test "${message[disable]}"
			then
				printf "\n${message[disable]}\nPress any key."
				read -a
			fi

			__repaint

		;;

		8) # Update hosts file with new custom rules

			clear

			printf "This next part could take some time.\nLook in ${dir[tmp]} to view activity in realtime.\n\nProcessing...\n"

			cp "${file[hosts]}" "${dir[tmp]}/hosts-temp.txt"
			cat "${dir[tmp]}/hosts-temp.txt" "${file[confbl]}" >> "${dir[tmp]}/hosts.txt"
			__hosts_update "norm" "${dir[tmp]}/hosts.txt" "${file[confwl]}"
			__hosts_update "wild" "${dir[tmp]}/hosts.txt" "${file[confwlw]}"

			sudo mv "${dir[tmp]}/hosts.txt" "${file[hosts]}"

			__cleandns
			__repaint

		;;
		
		9)
			clear
			__cleandns
			printf "\nPress any key"
			read a
			__repaint
		
		;;

		10) # Restore original hosts list

			if test -f "${file[hosts]}.hf.original"
			then # Restore the backup head from the original hosts file
				sudo mv "${file[hosts]}.hf.original" "${file[hosts]}"
			fi

			__repaint

		;;

		11) # Reset Custom Configs

			__menu_reset_confs

			__repaint hard

		;;

		12) # Install software packages necessary to build the package

			case "${conf[ess]}" in
			
				0)

					printf "\nThis will attempt to install the following packages:\n"

					for i in "${essentialpackages[@]}"; do
						printf "$i "
					done

					printf "\nContinue to install them: Yn:\n"
					read a
					
					let n=1
					while true; do
						case $a in

						y|Y)
						
							case $n in
							1)
								echo -e "conf""[ess]='1'" >> "${file[conf]}"
								sudo apt-get update
								let n=n+1
							;;
							esac
							
							for i in "${essentialpackages[@]}"; do
								sudo apt-get build-dep -y -q $i
								sudo apt-get install -y -q --install-suggests $i
							done

							printf "\nPress any key to continue\n"
							read something
							__repaint

						;;

						n|N)

							__repaint

						;;
						
						*)

						esac
						
					done
					
				;;
				
			esac

		;;
		
		[Rr])
			__repaint hard
		;;

		0) # Exit

			exit 0

		;;

		*)

		esac

	done

}


# Sub Menus

function __menu_list_management() {
	# Show and manage host lists
	
	__repaint conf "${file[confcl]}"
	
	while true; do

		printf "${bold}LIST MANAGEMENT${normal}"
		printf "\n\nUpdate list status\n\n"
		
		# Display lists available
		# $listsc # Value discovered during list array auto declares (see above)
		
		m=1
		while [ $m -le $listsc ] ; do
			status=$( eval echo "\${list$m[status]}" )
			info=$( eval echo "\${list$m[info]}" )
			printf "$m) [$status] - $info\n"
			print
			let m=m+1
		done
		
		printf "\n0) Return to Main Menu\n"
		
		printf "\nEnter list number to enable [+] or disable [-] then press Enter.\n"
		printf "\nType ${bold}E${normal} to Add, Remove or Edit remote hosts list providers.\n"
		
		read a

		case $a in

			0)
				__menu_main
			;;

			[Ee])
				__menu_remote_list_management

			;;

			*)
				__status $a
				__repaint conf "${file[confcl]}"
			;;

		esac

	done
}

function __menu_remote_list_management() {
	# Add or Remove new remote list providers

	__repaint conf "${file[confcl]}"
	
	while true; do

		printf "${bold}LIST MANAGEMENT: CUSTOM REMOTE SOURCES${normal}"
		printf "\n\nCustom remote list resources\n\n"
		
		# Display custom remote lists available for management
		# $listsc # Value discovered during list array auto declares (see above)

		let m=$listc+1
		while [ $m -le $listsc ] ; do
			status=$( eval echo -n "\${list$m[status]}" )
			info=$( eval echo -n "\${list$m[info]}" )
			printf "$m) [$status] - $info\n"
			print
			let m=m+1
		done

		printf "\n${bold}A${normal}) to Add a custom remote hosts list provider\n"
		printf "${bold}D${normal}) to Delete a custom remote hosts list provider\n"
		printf "${bold}E${normal}) to Edit a custom remote hosts list provider\n"
		printf "\n0) Return to Main Menu\n"

		read a

		case $a in

			0)
				__menu_main
			;;

			[Aa])

				clear

				printf "\nEnter details for new resource list ${m}.\n\n"
				
				__conf_update 'add' "list${m}[status]='+'" "${file[confcl]}"

				printf "Enter brief list description: "
				read a
				__conf_update 'add' "list${m}[info]='${a}'" "${file[confcl]}"

				printf "\nEnter the download URL. Do not include the package/file name: "
				read a
				__conf_update 'add' "list${m}[src]='${a}'" "${file[confcl]}"

				printf "\nEnter the package name: "
				read a
				__conf_update 'add' "list${m}[file]='${a}'" "${file[confcl]}"

				printf "\nEnter the package type (unzip, p7zip). Leave empty if this is not a zip file:"
				read a
				__conf_update 'add' "list${m}[flag]='${a}'" "${file[confcl]}"

				printf "\nEnter the target file name that contains the hosts data: "
				read a
				__conf_update 'add' "list${m}[target]='${a}'" "${file[confcl]}"

				printf "\nList ${m} added to hosts file repository. Press Enter.\n"
				read a
				
				__repaint conf "${file[confcl]}"

			;;

			[Dd])

				printf "\nEnter list number to delete.\n"
				read a

				__conf_update 'remw' "list${a}" "${file[confcl]}"

				printf "\nList ${a} deleted from hosts file repository. Press Enter.\n"
				read a

				__repaint conf "${file[confcl]}"
				
			;;

			[Ee])
				# To be implemented
					__repaint conf "${file[confcl]}"
			;;

			*)

			;;

		esac

	done
}


function __menu_custom_list_management() {
	# Show and manage host lists
	
	__repaint conf "${file[confcl]}"
	
	while true; do

		printf "${bold}CUSTOM LIST MANAGEMENT${normal}"
		printf "\n\nUpdate list status\n\n"

		# Display custom list options
		unset menu
		menu[1]="Add a host to custom whitelist"
		menu[2]="Add a host to custom wild whitelist"
		menu[3]="Add a host to custom blacklist"
		menu[4]="Remove a host from custom whitelist"
		menu[5]="Remove a host from custom wild whitelist"
		menu[6]="Remove a host from custom blacklist"

		n=1
		for i in "${menu[@]}" ; do
			printf "$n) ${i}\n"
			let n=n+1
		done
		
		printf "\n0) Return to Main Menu\n"
		
		printf "\nEnter option number then press Enter.\n"
		
		read a

		case $a in

			0)
				__menu_main
			;;

			1) # Add to custom whitelist

				printf "Custom whitelist is located at ${file[confwl]}\n\n"
				printf "Type in a host to add then press Enter. Press 0 to exit:\n\n"
				read a
				
				case $a in
					0)
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
					
					*)
						__conf_update 'add' "$a" "${file[confwl]}"
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
				esac

			;;

			2) # Add to custom wild whitelist

				printf "Custom wild whitelist is located at ${file[confwlw]}\n\n"
				printf "Type in a host to add then press Enter. Press 0 to exit:\n\n"
				read a

				case $a in
					0)
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
					
					*)
						__conf_update 'add' "$a" "${file[confwlw]}"
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
				esac

			;;

			3) # Add to custom blacklist

				printf "Custom blacklist is located at ${file[confbl]}\n\n"
				printf "Type in a host to add then press Enter. Press 0 to exit:\n\n"
				read a

				case $a in
					0)
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
					
					*)
						__conf_update 'add' "$a" "${file[confbl]}"
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
				esac

			;;

			4) # Remove from custom whitelist

				printf "Custom whitelist is located at ${file[confwl]}\n\n"
				printf "Type in a host to add then press Enter. Press 0 to exit:\n\n"
				read a

				case $a in
					0)
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
					
					*)
						__conf_update 'rem' "$a" "${file[confwl]}"
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
				esac

			;;

			5) # Remove from custom wild whitelist

				printf "Custom wild whitelist is located at ${file[confwlw]}\n\n"
				printf "Type in a host to add then press Enter. Press 0 to exit:\n\n"
				read a

				case $a in
					0)
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
					
					*)
						__conf_update 'rem' "$a" "${file[confwlw]}"
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
				esac

			;;

			6) # Remove from custom blacklist

				printf "Custom blacklist is located at ${file[confbl]}\n\n"
				printf "Type in a host to add then press Enter. Press 0 to exit:\n\n"
				read a

				case $a in
					0)
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
					
					*)
						__conf_update 'rem' "$a" "${file[confbl]}"
						__repaint '__menu_custom_list_management' # Effectively 'Return here'
					;;
				esac

			;;

			*)


			;;

		esac

	done
}

function __menu_reset_confs() {

	__repaint conf "${file[confcl]}"

	while true; do

		printf "${bold}CUSTOM CONFS MANAGEMENT${normal}"
		printf "\n\nReset custom lists and configurations\n\n"

		# Display menu
		unset menu
		menu[1]="Reset general configurations to their default values"
		menu[2]="Delete custom host file repository lists"
		menu[3]="Delete custom whitelist"
		menu[4]="Delete custom whitelist wild"
		menu[5]="Delete custom blacklist"

		m=1
		while [ $m -le ${#menu[@]} ] ; do
			printf "$m) ${menu[$m]}\n"
			print
			let m=m+1
		done
		
		printf "\n0) Return to Main Menu\n"
		
		printf "\nEnter item number to action then press Enter.\n"
		
		read a

		case $a in

			0)
				__menu_main
			;;

			1) # Reset confs[]
				__conf_delete "${file[conf]}" "$package custom configuration"

			;;

			2) # Delete custom host lists
				__conf_delete "${file[confcl]}" "Custom host file repositories"

			;;
			
			3) # Delete custom whitelist
				__conf_delete "${file[confwl]}" "custom whitelist"
			;;
			
			4) # Delete custom whitelist wild
				__conf_delete "${file[confwlw]}" "custom whitelist wild"
			
			;;
			
			5) # Delete custom blacklist
				__conf_delete "${file[confbl]}" "custom blacklist"
			
			;;

			*)
				__repaint conf "${file[confcl]}"
			;;

		esac

	done

	__repaint conf "${file[confcl]}"

}


## Launch

function __launch() {
	# launch terminal

	terminal=( konsole gnome-terminal x-terminal-emulator xdg-terminal terminator urxvt rxvt Eterm aterm roxterm xfce4-terminal termite lxterminal xterm )
	for i in ${terminal[@]}; do
		if command -v $i > /dev/null 2>&1; then
			exec $i -e "$0"
			# break
		else
			printf "\nUnable to automatically determine the correct terminal program to run e.g Console or Konsole. Please run this $package from the command line.\n"
			read something
			exit 1
		fi
	done
}

## Boot

__run "$@" # Loops back to the start. The script is read by BASH then __run is run. This ensures all functions are read into memory before anything happens.

# Exit is at end of __run()

# FOR DEBUGGING

# declare -p
