#!/bin/bash
clear
# set -x
###
#
# Host Flash™ 3.0.4 beta
#
# Downloads hosts file rules from various sources.
# Installs hosts file rules into /etc/hosts
# Integrates Host Flash™ hosts file rules with rules that already exist in /etc/hosts
#
# For OS: Linux (Debian)
# Tested With: Ubuntu flavours
#
# Lead Author: Lee Hodson
# Donate: https://paypal.me/vr51
# Website: https://host-flash.com<https://host-flash.com>
# This Release: 25th Oct. 2018
# First Written: 18th Oct. 2015
# First Release: 2nd Nov. 2015
#
# Copyright Host Flash™ https://host-flash.com<https://host-flash.com>
# License: GPL3
#
# Programmer: Lee Hodson<journalxtra.com>, VR51<vr51.com>
#
# Use of this program is at your own risk
#
# INSTALLS OR UPDATES
#
# Use Host Flash™ to block access to websites (hosts), ad servers, malicious websites and time wasting websites.
# Use Host Flash™ to manage your hosts file
#
# TO RUN:
#
# Ensure the script is executable:
#
#		Right-click > properties > Executable
#
#		OR
#
#		chmod u+x hostflash
#
# Launch by clicking the script file or by typing `bash hostflash` at the command line.
#
# Host Flash™ will attempt to preserve existing host rules.
#
#
###

##
#
#	TO DO / DEV NOTES
#
##
# versions: add deb installer
#		installed has desktop icon (like ServUp)
#
#	 	En/disable Automatic list update
# 	En/disable Automatic script update
#
# CLI: disable HF, enable HF, add rule, remove rule, update lists, set options
#
#	Move more actions into functions.
#
# Change menu system
#		What do you want to do? Manage Lists, Update hosts, Manage Custom Files
#			Do it here.
#
# Info table
#		Details about the live hosts file
#		Details about the built hosts file
#
# Add last 7 updates log
#		${log#[time]}
#		${log#[size]}
#		${log#[lines]}
#
# Compact local whitelists and local blacklists (all lower, sort -u)
# View/Edit local lists (nano, pico, cat)
#
# Add new lists
#
# Some configs/variables/options are yet to be re-implemented
#
###

##
#
# CONFIGS - should be no reason to manually change these
#
# Any of these can be overruled by adding each variable along with its new value into $HOME/.config/hostflash/.hfrc
#
##

# Do not Use trailing slashes in URLs, URIs or directory paths

package='Host Flash™' # Name of software installed by this installer
version='3.0.4 beta - 26th Oct. 2018'

declare -A app conf dir file

# Directories

dir[gith]='https://github.com/VR51/host-flash' # Github home URL for this package.
dir[gitp]='https://github.com/VR51/host-flash.git' # Software source package git address
dir[src]="$HOME/src/hostflash" # Directory where the source code will be stored locally
dir[tmp]="${dir[src]}/tmp" # Directory where temporary files will be stored locally
dir[docs]="${dir[src]}/DOC" # Location of program documents. # To be written
dir[conf]="$HOME/.config/hostflash" # Location of custom configuration files.

# Files

file[hosts]='/etc/hosts' # Location of system hosts file. Where it is copied from and where it is installed to.
# file[hosts]='/home/lee/Goodies/Downloaders/test/hosts' # For testing by me

file[conf]="${dir[conf]}/.hfrc" # Location of user's custom settings for Host Flash™.
file[confwl]="${dir[conf]}/.hfwlrc" # Location of the user's custom whitelist.
file[confwlw]="${dir[conf]}/.hfwlwrc" # Location of the user's custom whitelist-wild.
file[confbl]="${dir[conf]}/.hfblrc" # Location of the user's custom blacklist.
file[confcl]="${dir[conf]}/.hfclrc" # Location of the user's custom hosts lists.

# App Launcher Settings
# These are specific to the application/task manager installer (to be implemented)

dir[icon]="${dir[src]}/data" # Directory where the application icon will be located.
dir[bin]='/usr/bin' # Binary installation path. Where should the compiled binary be installed to? Exact path. # Not required for this installer.
file[icon]="hostflash.svg" # Icon name
app[type]='Application' # 
app[cats]='Utilities' # Application launcher categories
app[binary]="hostflash" # Name of the binary file that is this program.

# Detected settings

user=$(whoami) # Current User
group=$(id -g -n $user) # Current user's primary group

###
#
# OTHER SETTINGS
#
# Indexed arrays do not need to be declared before use.
# These declare statements are here mostly to assist script readability and for tracking.
# 
###

declare -a list1 list2 list3 list4 list5 list6 list7 list8 list9 list10 list11 list12 list13 list14 list15 list16 # Hosts lists
declare -a menu # Menu options are set within __prompt()
declare -a select # Menu options count
declare -a message # Index indicates related conf, mode or menu item
declare -a mode # Used for notices
declare -a essentialpackages # Packages to install to help the build process
declare -a credits # Hosts file credits

##
#
# LISTS
#
#
# These are...
#
# list[0]='Enabled / Disabled' # * or 0 for TRUE or FALSE
# list[1]='List Domain' # The name of the list
# list[2]='Download URL' # Where the package is downloaded from
# list[3]='Download Package' # Name of package downloaded
# list[4]='Package Target' # Name of usable file in the downloaded package
# list[5]='Flags: E.g Package Type' # unzip, p7zip, empty if raw txt, or whitelist.
#
# Changes to list[0] are stored in .hfrc
# Custom lists will be added to .hfclrc
#		Framework in place: conf etc... Needs menu section to be added.
#
##

list1[0]='+'
list1[1]='hosts-file.net (Liberal: Blocks mostly adware, spyware, malware and trackers. Big list)'
list1[2]='http://hosts-file.net/download'
list1[3]='hosts.txt'
list1[4]='hosts.txt'
list1[5]=''

list2[0]='+'
list2[1]='mvps.org (Liberal: Blocks mostly adware, spyware, malware and trackers. Big list)'
list2[2]='http://winhelp2002.mvps.org'
list2[3]='hosts.zip'
list2[4]='HOSTS'
list2[5]='unzip'

list3[0]='+'
list3[1]='free.fr-Trackers (Moderate: Blocks trackers)'
list3[2]='http://rlwpx.free.fr/WPFF'
list3[3]='htrc.7z'
list3[4]='Hosts.trc'
list3[5]='p7zip'

list4[0]='+'
list4[1]='free.fr-Ad-Servers (Moderate: Blocks ad servers)'
list4[2]='http://rlwpx.free.fr/WPFF'
list4[3]='hpub.7z'
list4[4]='Hosts.pub'
list4[5]='p7zip'

list5[0]='+'
list5[1]='free.fr-Malware (Moderate: Blocks malware domains)'
list5[2]='http://rlwpx.free.fr/WPFF'
list5[3]='hrsk.7z'
list5[4]='Hosts.rsk'
list5[5]='p7zip'

list6[0]='+'
list6[1]='free.fr-Adult (Moderate: Blocks adult domains. Coincidentally blocks forums and some social sites)'
list6[2]='http://rlwpx.free.fr/WPFF'
list6[3]='hsex.7z'
list6[4]='Hosts.sex'
list6[5]='p7zip'

list7[0]='+'
list7[1]='free.fr-Misc (Moderate: Blocks miscellaneous domains)'
list7[2]='http://rlwpx.free.fr/WPFF'
list7[3]='hmis.7z'
list7[4]='Hosts.mis'
list7[5]='p7zip'

list8[0]='+'
list8[1]='someonewhocares.org (Liberal: Blocks mostly adware, spyware, malware and trackers. Small list)'
list8[2]='http://someonewhocares.org/hosts'
list8[3]='hosts'
list8[4]='hosts'
list8[5]=''

list9[0]='+'
list9[1]='malwaredomainlist.com (Liberal: Blocks mostly malware. Small list)'
list9[2]='http://www.malwaredomainlist.com/hostslist'
list9[3]='hosts.txt'
list9[4]='hosts.txt'
list9[5]=''

list10[0]='+'
list10[1]='hostsfile.org (Very Strict: Regular blocks + porn, gambling and gaming sites)'
list10[2]='http://www.hostsfile.org/Downloads'
list10[3]='hosts.txt'
list10[4]='hosts.txt'
list10[5]=''

# Others

list11[0]='+'
list11[1]='Community Whitelist (Host Flash™ whitelist. Unblocks a limited set of sites blocked by the other blacklists)'
list11[2]='https://gist.githubusercontent.com/VR51/7eaace2b6778ea508996/raw/ad90168c61e926d462895b190ad84e37f4e5c99e'
list11[3]='whitelist.txt'
list11[4]='whitelist.txt'
list11[5]='whitelist'

list12[0]='+'
list12[1]='Community Whitelist Wild (Host Flash™ wild whitelist. Unblocks a limited set of sites blocked by the other blacklists)'
list12[2]='https://gist.githubusercontent.com/VR51/9798c78337fe2f7ad589/raw/'
list12[3]='whitelist-wild.txt'
list12[4]='whitelist-wild.txt'
list12[5]='whitelist-wild'

list13[0]='+'
list13[1]='Community Blacklist (Host Flash™ blacklist. Blocks a limited set of sites not blocked by other lists)'
list13[2]='https://gist.githubusercontent.com/VR51/ef3b90b1be2693a44f27/raw/'
list13[3]='blocklist.txt'
list13[4]='blocklist.txt'
list13[5]=''

list14[0]='+'
list14[1]='Local Whitelist (Your own custom whitelist)'
list14[2]='localhost'
list14[3]='.hfwlrc'
list14[4]='.hfwlrc'
list14[5]='whitelist'

list15[0]='+'
list15[1]='Local Whitelist Wild (Your own custom wild whitelist)'
list15[2]='localhost'
list15[3]='.hfwlwrc'
list15[4]='.hfwlwrc'
list15[5]='whitelist-wild'

list16[0]='+'
list16[1]='Local blacklist (Your own custom blacklist)'
list16[2]='localhost'
list16[3]='.hfblrc'
list16[4]='.hfblrc'
list16[5]=''

# GENERAL

essentialpackages=( zip unzip 7z curl sed git )
	
conf[ess]=0 # Essentials # Install build essential software. 0 = Not done, 1 = Done
conf[upv]=0 # Update Host Flash™ program.
#conf[locv]=$($binary -v) # Installed package version
conf[locv]="$version"
conf[gitv]=$(curl -v --silent "${dir[gith]}/commit/master" --stderr - | grep '<relative-time datetime' | sed -E 's#<relative-time datetime="(.+)">.+$#\1#g' | tr -d '[:space:]' | tr '[:alpha:]' ' ')

conf[ip]='127.0.0.1' # Redirect IP address
conf[mode]='0' # Build Only or Build and Install 0 or 1

## END SETTINGS

## BEGIN 

# Other settings
bold=$(tput bold)
normal=$(tput sgr0)

# Locate where we are
filepath="$( echo $PWD )"

# A Little precaution
cd "$filepath"


# Make directories

if test ! -d "$HOME/src"; then
	mkdir "$HOME/src"
fi

if test ! -d "${dir[src]}"; then
	mkdir "${dir[src]}"
fi

if test ! -d "${dir[tmp]}"; then
	mkdir "${dir[tmp]}"
else
	rm -r "${dir[tmp]}"
	mkdir "${dir[tmp]}"
fi

if test ! -d "${dir[conf]}"; then
	mkdir "${dir[conf]}"
fi


# Make User Config files

f=( "$HOME/src" "${file[conf]}" "${file[confwl]}" "${file[confwlw]}" "${file[confbl]}" "${file[confcl]}" )
for i in ${f[@]}; do
	if test ! -f "$i"; then
		touch "$i"
	fi
done
unset f

# INSTALL RC SETTINGS

function __repaint() {
# Loads configs then clears the screen
# Whatever calls this should reload the screen for the new configs to be reflected on the screen

	# @1 = type: soft, hard, conf
	#  soft just refreshes the screen
	#  hard reloads the script in the current shell
	#  conf must be followed by a config file to load. Loads default conf then extra conf.
	#  'no argument' loads the default config file represented by ${file[conf]}
	# @2 = config file to reload
	
	clear
	
	case "$1" in
	
		soft)
			tset
	
		;;
		
		hard)
			exec bash "$0"
		
		;;

		conf)

		if source "$2"
		then
				source "${file[conf]}"
				source "$2"
		else
				. "${file[conf]}"
				. "$2"
		fi
		
		;;

		*)

		if source "${file[conf]}"
		then
				source "${file[conf]}"
		else
				. "${file[conf]}"
		fi
		
		;;
	
	esac

}

__repaint conf "${file[confcl]}"


##
# Actions
##


function __run() {
	# Check for terminal then run else just run program
	
	tty -s
	if test "$?" -ne 0 ; then
		__launch
	else
		__prompt "$1" # This will be changed when CLI added
	fi

}

function __hosts_update() {
	# Read the file of hosts and remove any line listed in the input whitelist file

	# @1 = type: (file) norm or wild, or (string) rem or remw
	# @2 = file to remove data from
	# @3 = file containing lines of data to remove from @2 or single line of text to remove from @2

	case $1 in
		norm)

			data=$(<$3)
			data=$(echo $data | tr "[:blank:]" '|')
			grep -viE "^${conf[ip]}[[:blank:]]($data)" "$2" > "$2.tmp" # This method removes whitelisted hostnames

		;;

		wild)

			data=$(<$3)
			data=$(echo $data | tr "[:blank:]" '|')
			grep -viE "^${conf[ip]}.*($data)" "$2" > "$2.tmp" # This method removes whitelisted hostnames

		;;

		linen)
			# sed -r -i "s/${conf[ip]}[[:blank:]]$3.*?$//g" "$2" # Remove exact match
			grep -viE "^${conf[ip]}[[:blank:]]$3" "$2" > "$2.tmp" # This method removes whitelisted hostnames

		;;

		linew)
			# sed -r -i "s/${conf[ip]}[[:blank:]].*\.$3.*?$//g" "$2" # Remove any line with a match
			grep -viE "^${conf[ip]}.*$3.*?" "$2" > "$2.tmp" # This method removes whitelisted hostnames

		;;

	esac

	# Clean up
	if test -f "$2"; then
		mv "$2.tmp" "$2"
	fi
	
}

function __conf_update {
	# Add or remove a single host from the .hf*rc config files

	# @1 = type: add, rem or remw
	# @2 = data to add/remove
	# @3 = file to add/remove @1 to/from
	
	case $1 in
		add)
			if ! grep "$2" "$3"
			then
				echo "$2" >> "$3"
			fi
		;;

		rem)
			sed -r -i "s/$2.*?$//g" "$3" # Remove exact match
		;;

		remw)
			sed -r -i "s/.*?\.$2.*?$//g" "$3" # Remove any line with a match
		;;
	esac
	
}

function __enable() {
	# Install Host Flash™ hosts list to /etc/hosts

	if test ! -f "${file[hosts]}.hf.original"
	then
		sudo cp "${file[hosts]}" "${file[hosts]}.hf.original" # The original hosts file before Host Flash™ first ever use in this system.
	fi
	
	if test -f "${dir[tmp]}/hosts.txt"
	then
		sudo cp "${file[hosts]}" "${file[hosts]}.hf.backup" # General restore file
		sudo mv "${dir[tmp]}/hosts.txt" "${file[hosts]}"
		sudo mv "${dir[tmp]}/hosts.copy" "${file[hosts]}.hf.head" # This is the raw head of the hosts file.
	else
		printf "$package hosts file not found. Have you built it yet?"
	fi
	
}

function __disable() {
	# Remove Host Flash™ hosts list from /etc/hosts

	if test -f "${file[hosts]}.hf.head"
	then # Restore the backup head from the original hosts file
		cp "${file[hosts]}" "${dir[tmp]}/hosts.copy"
		sudo mv "${file[hosts]}.hf.head" "${file[hosts]}"
	else # Delete Host Flash™ data from /etc/hosts, if it exists
		cp "${file[hosts]}" "${dir[tmp]}/hosts.copy"
		sed -i '/#### Host Flash™ Bad Hosts Block ########/,$d' "${dir[tmp]}/hosts.copy"
		sudo mv "${dir[tmp]}/hosts.copy" "${file[hosts]}"
	fi
	
}

function __build() {
	# Build the hosts file: download lists, clean them, merge them, create new hosts file

	# Download lists. Merge them into new hosts file
	n=1
	until [ $n -eq 0 ]; do

		list[0]=$( eval echo "\${list$n[0]}" )
		list[1]=$( eval echo "\${list$n[1]}" )
		list[2]=$( eval echo "\${list$n[2]}" )
		list[3]=$( eval echo "\${list$n[3]}" )
		list[4]=$( eval echo "\${list$n[4]}" )
		list[5]=$( eval echo "\${list$n[5]}" )

		if test "${list[0]}" = '+' # && test ${#list[0]} -ne 0
		then
			if test "${list[2]}" != 'localhost'
			then
				curl -e "${list[2]}" "${list[2]}/${list[3]}" -o "${dir[tmp]}/${list[3]}"
				if test "${list[5]}" = 'unzip'; then unzip -o "${dir[tmp]}/${list[3]}" -d "${dir[tmp]}"; fi
				if test "${list[5]}" = 'p7zip'; then 7z e -y "${dir[tmp]}/${list[3]}" -o"${dir[tmp]}" ; fi
				
				if test "${list[5]}" = 'whitelist'
				then
					cat "${dir[tmp]}/${list[4]}" >> "${dir[tmp]}/whitelist-temp.txt"
				elif test "${list[5]}" = 'whitelist-wild'
				then
					cat "${dir[tmp]}/${list[4]}" >> "${dir[tmp]}/whitelist-wild-temp.txt"
				else
					cat "${dir[tmp]}/${list[4]}" >> "${dir[tmp]}/hosts-temp.txt"
				fi

				if test -f "${dir[tmp]}/${list[3]}"
				then
					rm "${dir[tmp]}/${list[3]}"
				fi
				
				if test -f "${dir[tmp]}/${list[4]}"
				then
					rm "${dir[tmp]}/${list[4]}"
				fi
				
			else # It's local host
				if test "${list[5]}" = 'whitelist'
				then
					cat "${dir[conf]}/${list[4]}" >> "${dir[tmp]}/whitelist-temp.txt"
				elif test "${list[5]}" = 'whitelist-wild'
				then
					cat "${dir[conf]}/${list[4]}" >> "${dir[tmp]}/whitelist-wild-temp.txt"
				else
					cat "${dir[conf]}/${list[4]}" >> "${dir[tmp]}/hosts-temp.txt"
				fi
			fi

			credits+=("# Includes hosts blacklist from ${list[1]}\n")

		fi
		
		if test ${#list[0]} -eq 0
		then
			let n=n-n
		else
			let n=n+1
		fi

	done
	
	__repaint
	
	printf "This next part could take some time.\nLook in ${dir[tmp]} to view activity in realtime.\n\nProcessing...\n"
	
	#	Format raw list data in hosts-temp.txt

	sed -i 's/#.*//g' "${dir[tmp]}/hosts-temp.txt" # Remove all comments (some come after hostname <-> IP map lines)
	iconv -c -t UTF-8//TRANSLIT "${dir[tmp]}/hosts-temp.txt" > "${dir[tmp]}/hosts-utf8.txt" # Convert non UTF8 characters to fix character faults in French lists.
	mv "${dir[tmp]}/hosts-utf8.txt" "${dir[tmp]}/hosts-temp.txt"
	sed -i 's/^[^01-9].*//g' "${dir[tmp]}/hosts-temp.txt" # Remove any line that does not begin with a number
	sed -i '/^$/d' "${dir[tmp]}/hosts-temp.txt" # Remove empty lines 1
	sed -i '/^[[:blank:]]*$/d' "${dir[tmp]}/hosts-temp.txt" # Remove empty lines 2
	sed -i 's/\n\n/\n/g' "${dir[tmp]}/hosts-temp.txt" # Remove empty lines 3
	sed -i -e :a -e '/^\n*$/{$d;N;};/\n$/ba' "${dir[tmp]}/hosts-temp.txt" # Remove empty lines 4
	sed -i '/.*\blocalhost\b.*/d' "${dir[tmp]}/hosts-temp.txt" # Remove localhost lines - the computer's installed host file already has localhost defined the way it should be
	sed -i "s/^[01-9\.].*[ \t]/${conf[ip]} /g" "${dir[tmp]}/hosts-temp.txt" # Replace with a single space and the new IP address everything up to, and including, the first tab(s) or space(s) in each line

	# Sort the lists
	if test -f "${dir[tmp]}/hosts-temp.txt"
	then
		sort -f -u "${dir[tmp]}/hosts-temp.txt" > "${dir[tmp]}/hosts-temp2.txt"
		rm "${dir[tmp]}/hosts-temp.txt"
		mv "${dir[tmp]}/hosts-temp2.txt" "${dir[tmp]}/hosts-temp.txt"
	fi

	if test -f "${dir[tmp]}/whitelist-temp.txt"
	then
		sort -f -u "${dir[tmp]}/whitelist-temp.txt" > "${dir[tmp]}/whitelist.txt"
		rm "${dir[tmp]}/whitelist-temp.txt"
	fi
	
	if test -f "${dir[tmp]}/whitelist-wild-temp.txt"
	then
		sort -f -u "${dir[tmp]}/whitelist-wild-temp.txt" > "${dir[tmp]}/whitelist-wild.txt"
		rm "${dir[tmp]}/whitelist-wild-temp.txt"
	fi

	# Process whitelist -- remove whitelisted domains from hosts-temp.txt

	__hosts_update "norm" "${dir[tmp]}/hosts-temp.txt" "${dir[tmp]}/whitelist.txt"
	__hosts_update "wild" "${dir[tmp]}/hosts-temp.txt" "${dir[tmp]}/whitelist-wild.txt"
	
	#	Get head of the existing hosts file stored at /etc/hosts
	#	Remove old Host Flash™ blacklist from existing hosts file, assuming blacklist exists
	#	Remove empty lines from the end of the header
	#	This creates file hosts.copy which is used a few lines down from here

	cp "${file[hosts]}" "${dir[tmp]}/hosts.copy"
	sed -r -i '/#### Host.? Flash.? Bad Hosts Block ########/,$d' "${dir[tmp]}/hosts.copy" # Delete old Host Flash data from /etc/hosts
	sed -i 's/\n\n/\n/g' "${dir[tmp]}/hosts.copy" # First Pass: Ensuring we don't have hundreds of successive newlines
	sed -i -e :a -e '/^\n*$/{$d;N;};/\n$/ba' "${dir[tmp]}/hosts.copy" # Second Pass: Ensuring we don't have hundreds of successive newlines
	
	printf '\n\n#### Host Flash™ Bad Hosts Block ########\n\n# Credits\n\n' >> "${dir[tmp]}/hosts.copy"

	for i in "${credits[@]}" ; do
		printf "$i" >> "${dir[tmp]}/hosts.copy"
	done

	printf "\n\n# Installed with $package\n\n# Visit host-flash.com to learn more\n\n" >> "${dir[tmp]}/hosts.copy"
	
	
	# Merge the old head with the new hosts blacklist
	
	cat "${dir[tmp]}/hosts.copy" "${dir[tmp]}/hosts-temp.txt" > "${dir[tmp]}/hosts.txt"

}


function __prompt() {

	# $1 = instruction

	while true; do
	
		if test "$?" -eq 0
		then

			case "${conf[mode]}" in

					0)
						mode[0]='MODE: Build Only\n'

					;;

					1)
						mode[0]='MODE: Build and Install\n'

					;;

			esac

			# Set Menu Options

			case "${conf[ess]}" in

				0)
					menu[1000]='Install missing software packages needed by Host Flash™\n'

				;;

			esac

			# Display lists available
			menu[1]="[${list1[0]}] - ${list1[1]}"
			menu[2]="[${list2[0]}] - ${list2[1]}"
			menu[3]="[${list3[0]}] - ${list3[1]}"
			menu[4]="[${list4[0]}] - ${list4[1]}"
			menu[5]="[${list5[0]}] - ${list5[1]}"
			menu[6]="[${list6[0]}] - ${list6[1]}"
			menu[7]="[${list7[0]}] - ${list7[1]}"
			menu[8]="[${list8[0]}] - ${list8[1]}"
			menu[9]="[${list9[0]}] - ${list9[1]}"
			menu[10]="[${list10[0]}] - ${list10[1]}"
			menu[11]=''
			menu[12]="[${list11[0]}] - ${list11[1]}"
			menu[13]="[${list12[0]}] - ${list12[1]}"
			menu[14]="[${list13[0]}] - ${list13[1]}"
			menu[15]="[${list14[0]}] - ${list14[1]}"
			menu[16]="[${list15[0]}] - ${list15[1]}"
			menu[17]="[${list16[0]}] - ${list16[1]}"

			menu[100]=''

			menu[101]="[${conf[ip]}] - Change redirect IP address"
			menu[102]=''
			menu[103]="Add a host to custom whitelist"
			menu[104]="Add a host to custom wild whitelist"
			menu[105]="Add a host to custom blacklist"
			menu[106]="Remove a host from custom whitelist"
			menu[107]="Remove a host from custom wild whitelist"
			menu[108]="Remove a host from custom blacklist"

			menu[200]=''

			menu[201]='Change Build/Install Mode'
			menu[202]=''
			case "${conf[mode]}" in

				0)
					menu[203]='Build Host Flash™ list.'

				;;

				1)
					menu[203]='Build and Install Host Flash™ list.'

				;;

			esac

			menu[300]=''

			menu[301]='Enable Host Flash™ list.'
			menu[302]='Disable Host Flash™ list.'
			menu[303]='Update Host Flash™ list with new custom rules'
			menu[304]=''
			menu[305]='Restore original hosts file.'

			menu[400]=''

			menu[401]="Reset to default $package configuration?"

			printf $bold
			printf "${mode[0]}\n"
			printf $normal

			printf "MENU\n\n"
			printf "INSTRUCTIONS: a) Select lists to install, b) optionally set the redirect IP address then c) build the hosts file firewall before you d) Enable the built Host Flash™ hosts firewall i.e. options 1 to 16, then 17 (optional), 25 and 26. Change MODE to Build and Install to set $package to automatically install the hosts file after it is built.\n\n"

			n=1
			for i in "${menu[@]}"; do
				if [ "$i" == '' ]; then
					printf "\n"
				else
					printf "$n) $i\n"
					select[$n]=$n
					let n=n+1
				fi
			done


			printf "\n0) Exit\n\n"

			# Notices

			printf $bold

			printf "\nGENERAL INFO\n"
				
			printf $normal

			printf "\n System $package: ${conf[locv]}"
			printf "\n Latest git commit: ${conf[gitv]}\n"

			printf "\nIf the computer crashes during installation lower the number of lists processed or cool your computer then try again.\n"

			printf $bold
				printf "\nChoose Wisely: "
			printf $normal
			read REPLY
		
		else
			REPLY=$1
		fi

		case $REPLY in

		1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16) # Choose lists to download # When moved to its own menu this will only be [[:num:]]

			if grep "list$REPLY\[0]='-'" "${file[conf]}"
			then
				sed -i "/list$REPLY\[0]=/d" "${file[conf]}"
				echo -e "list${REPLY}[0]='+'" >> "${file[conf]}"
			else
				sed -i "/list$REPLY\[0]=/d" "${file[conf]}"
				echo -e "list${REPLY}[0]='-'" >> "${file[conf]}"
			fi

			__repaint
			
		;;

		17) # Change redirect IP address

			printf "Current Redirect IP: ${conf[ip]}"
			printf "\nType in new Redirect IP then press Enter:\n\n"
			read ip

			if grep "conf\[ip]=" "${file[conf]}"
			then
				sed -i "s/conf\[ip]='.*'/conf\[ip]='$ip'/g" "${file[conf]}"
			else
				echo -e "conf""[ip]='$ip'" >> "${file[conf]}"
			fi

			__repaint

		;;
		
		18) # Add to custom whitelist

			printf "Custom whitelist is located at ${file[confwl]}"
			printf "\nType in a host to add then press Enter:\n\n"
			read a

			__conf_update 'add' "$a" "${file[confwl]}"
			
			__repaint

		;;

		19) # Add to custom wild whitelist

			printf "Custom wild whitelist is located at ${file[confwlw]}"
			printf "\nType in a host to add then press Enter:\n\n"
			read a

			__conf_update 'add' "$a" "${file[confwlw]}"
			
			__repaint

		;;

		20) # Add to custom blacklist

			printf "Custom blacklist is located at ${file[confbl]}"
			printf "\nType in a host to add then press Enter:\n\n"
			read a

			__conf_update 'add' "$a" "${file[confbl]}"

			__repaint

		;;

		21) # Remove from custom whitelist

			printf "Custom whitelist is located at ${file[confwl]}"
			printf "\nType in a host to remove then press Enter:\n\n"
			read a

			__conf_update 'rem' "$a" "${file[confwl]}"

			__repaint

		;;

		22) # Remove from custom wild whitelist

			printf "Custom wild whitelist is located at ${file[confwlw]}"
			printf "\nType in a host to remove then press Enter:\n\n"
			read a

			__conf_update 'rem' "$a" "${file[confwlw]}"

			__repaint

		;;

		23) # Remove from custom blacklist

			printf "Custom blacklist is located at ${file[confbl]}"
			printf "\nType in a host to remove then press Enter:\n\n"
			read a

			__conf_update 'rem' "$a" "${file[confbl]}"

			__repaint

		;;

		24) # Set Mode

			if grep "conf\[mode]='0'" "${file[conf]}"
			then
				sed -i "s/conf\[mode]='0'/conf\[mode]='1'/g" "${file[conf]}"
				
			elif grep "conf\[mode]='1'" "${file[conf]}"
			then
				sed -i "s/conf\[mode]='1'/conf\[mode]='0'/g" "${file[conf]}"
				
			else
				echo -e "conf""[mode]='1'" >> "${file[conf]}"
			fi

			__repaint
			
		;;

		25) # Build or Build and Install the Host Flash™ hosts file

			__build
			
			case "${conf[mode]}" in
			
				1)
			
					__enable
					
				;;
				
			esac
			
			__repaint

		;;

		26) # Enable Host Flash™ hosts list

			__enable

			__repaint

		;;

		27) # Disable Host Flash™ hosts list

			__disable

			__repaint

		;;
		
		28) # Update hosts file with new custom rules

			__repaint
			
			printf "This next part could take some time.\nLook in ${dir[tmp]} to view activity in realtime.\n\nProcessing...\n"
			
			cp "${file[hosts]}" "${dir[tmp]}/hosts-temp.txt"
			cat "${dir[tmp]}/hosts-temp.txt" "${file[confbl]}" >> "${dir[tmp]}/hosts.txt"
			__hosts_update "norm" "${dir[tmp]}/hosts.txt" "${file[confwl]}"
			__hosts_update "wild" "${dir[tmp]}/hosts.txt" "${file[confwlw]}"
			
			sudo mv "${dir[tmp]}/hosts.txt" "${file[hosts]}"
			
			__repaint

		;;

		29) # Restore Host Flash™ hosts list

			if test -f "${file[hosts]}.hf.original"
			then # Restore the backup head from the original hosts file
				sudo mv "${file[hosts]}.hf.original" "${file[hosts]}"
			fi

			__repaint

		;;

		30) # Reset Custom Configs

			if test -f "${file[conf]}"; then
				rm "${file[conf]}"
				printf "$package configuration reset.\n"
				printf "\nPress any key to continue\n"
				read something
			else
				printf "$package configuration file not found. Nothing to do. Nothing done.\n"
				printf "\nPress any key to continue\n"
				read something
			fi

			__repaint hard

		;;

		31) # Install software packages necessary to build the package

			case "${conf[ess]}" in
			
				0)

					printf "\nThis will attempt to install the following packages:\n"

					for i in "${essentialpackages[@]}"; do
						printf "$i "
					done

					printf "\nContinue to install them: Yn:\n"
					read a
					
					let n=1
					while true; do
						case $a in

						y|Y)
						
							case $n in
							1)
								echo -e "conf""[ess]='1'" >> "${file[conf]}"
								sudo apt-get update
								let n=n+1
							;;
							esac
							
							for i in "${essentialpackages[@]}"; do
								sudo apt-get build-dep -y -q $i
								sudo apt-get install -y -q --install-suggests $i
							done

							printf "\nPress any key to continue\n"
							read something
							__repaint

						;;

						n|N)

							__repaint

						;;
						
						*)

						esac
						
					done
					
				;;
				
			esac

		;;

		0) # Exit

			exit 0

		;;

		*)

		esac

	done

}


function __launch() {
	# launch terminal

	terminal=( konsole gnome-terminal x-terminal-emulator xdg-terminal terminator urxvt rxvt Eterm aterm roxterm xfce4-terminal termite lxterminal xterm )
	for i in ${terminal[@]}; do
		if command -v $i > /dev/null 2>&1; then
			exec $i -e "$0"
			# break
		else
			printf "\nUnable to automatically determine the correct terminal program to run e.g Console or Konsole. Please run this $package from the command line.\n"
			read something
			exit 1
		fi
	done
}

## Boot

__run "$@" # Loops back to the start. The script is read by BASH then __run is run. This ensures all functions are read into memory before anything happens.

# Exit is at end of __run()

# FOR DEBUGGING

# declare -p
